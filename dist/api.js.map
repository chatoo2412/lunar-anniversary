{"version":3,"sources":["../src/api.ts"],"names":["parseResponse","getNextDate","serviceKey","bypassFuckingCorb","target","fetch","get","restPath","params","URLSearchParams","append","then","response","text","getNextAnniversary","lunMonth","lunDay","year","Date","getFullYear","searchParams","fromSolYear","toSolYear","leapMonth","padStart"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,WAAT,QAA4B,WAA5B;AAEA,MAAMC,UAAU,GACd,0FADF;;AAGA,MAAMC,iBAAiB,GAAG,MAAOC,MAAP,IACxBC,KAAK,CAAE,uCAAsCD,MAAO,EAA/C,CADP;;AAGA,MAAME,GAAG,GAAG,OAAOC,QAAP,EAAyBC,MAAM,GAAG,IAAIC,eAAJ,EAAlC,KAA4D;AACtED,EAAAA,MAAM,CAACE,MAAP,CAAc,YAAd,EAA4BR,UAA5B;AAEA,SAAOC,iBAAiB,CACrB,qEAAoEI,QAAS,IAAGC,MAAO,EADlE,CAAjB,CAELG,IAFK,CAEAC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFZ,CAAP;AAGD,CAND;;AAQA,OAAO,MAAMC,kBAAkB,GAAG,OAAOC,QAAP,EAAyBC,MAAzB,KAA4C;AAC5E,QAAMC,IAAI,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAb;AAEA,QAAMC,YAAY,GAAG,IAAIX,eAAJ,CAAoB;AACvCY,IAAAA,WAAW,EAAG,GAAEJ,IAAI,GAAG,CAAE,EADc;AAEvCK,IAAAA,SAAS,EAAG,GAAEL,IAAI,GAAG,CAAE,EAFgB;AAGvCM,IAAAA,SAAS,EAAE,GAH4B;AAIvCR,IAAAA,QAAQ,EAAG,GAAEA,QAAS,EAAZ,CAAcS,QAAd,CAAuB,CAAvB,EAA0B,GAA1B,CAJ6B;AAKvCR,IAAAA,MAAM,EAAG,GAAEA,MAAO,EAAV,CAAYQ,QAAZ,CAAqB,CAArB,EAAwB,GAAxB;AAL+B,GAApB,CAArB;AAQA,QAAMZ,QAAQ,GAAG,MAAMN,GAAG,CAAC,qBAAD,EAAwBc,YAAxB,CAAH,CAAyCT,IAAzC,CACrBX,aADqB,CAAvB;AAIA,SAAOC,WAAW,CAACW,QAAD,CAAlB;AACD,CAhBM","sourcesContent":["import { parseResponse } from \"./parsers.js\";\nimport { getNextDate } from \"./date.js\";\n\nconst serviceKey =\n  \"yB2GxPS0T1X1yZRcUfVequ9huA3rLjadyg4LYIdEJpOqkP/rdkOBEv69fdKQPe5cz1ZunhDSUJ+Uf7x6cTW2RA==\";\n\nconst bypassFuckingCorb = async (target: string) =>\n  fetch(`https://cors-anywhere.herokuapp.com/${target}`);\n\nconst get = async (restPath: string, params = new URLSearchParams()) => {\n  params.append(\"ServiceKey\", serviceKey);\n\n  return bypassFuckingCorb(\n    `http://apis.data.go.kr/B090041/openapi/service/LrsrCldInfoService/${restPath}?${params}`\n  ).then(response => response.text());\n};\n\nexport const getNextAnniversary = async (lunMonth: number, lunDay: number) => {\n  const year = new Date().getFullYear();\n\n  const searchParams = new URLSearchParams({\n    fromSolYear: `${year - 1}`,\n    toSolYear: `${year + 1}`,\n    leapMonth: \"Ìèâ\",\n    lunMonth: `${lunMonth}`.padStart(2, \"0\"),\n    lunDay: `${lunDay}`.padStart(2, \"0\")\n  });\n\n  const response = await get(\"getSpcifyLunCalInfo\", searchParams).then(\n    parseResponse\n  );\n\n  return getNextDate(response);\n};\n"],"file":"api.js"}